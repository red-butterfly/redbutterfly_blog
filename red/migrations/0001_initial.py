# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-09-12 09:50
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(blank=True, max_length=150, verbose_name='\u5730\u5740')),
                ('city', models.CharField(blank=True, max_length=30, verbose_name='\u57ce\u5e02')),
                ('country', models.CharField(blank=True, max_length=30, verbose_name='\u56fd\u5bb6')),
                ('qq', models.CharField(blank=True, max_length=15, verbose_name='QQ')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='\u7535\u8bdd')),
                ('heading', models.ImageField(blank=True, upload_to=b'', verbose_name='\u5934\u50cf')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='\u6807\u9898')),
                ('content', models.TextField(verbose_name='\u6587\u7ae0\u5185\u5bb9')),
                ('summary', models.CharField(blank=True, max_length=200, verbose_name='\u6587\u7ae0\u6458\u8981')),
                ('isreproduce', models.BooleanField(verbose_name='\u662f\u5426\u8f6c\u8f7d')),
                ('publishtime', models.DateTimeField(auto_now_add=True, verbose_name='\u4e0a\u4f20\u65f6\u95f4')),
                ('last_mod_time', models.DateTimeField(auto_now=True, verbose_name='\u4fee\u6539\u65f6\u95f4')),
                ('readtimes', models.IntegerField(default=0, verbose_name='\u9605\u8bfb\u91cf')),
                ('auther', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-publishtime'],
            },
        ),
        migrations.CreateModel(
            name='blogtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typename', models.CharField(max_length=30, verbose_name='\u7c7b\u578b\u540d\u79f0')),
                ('count', models.IntegerField(verbose_name='\u4f5c\u54c1\u6570\u91cf')),
                ('tips', models.IntegerField(verbose_name='\u7c7b\u578b\u8bbf\u95ee\u91cf')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=30, verbose_name='\u7528\u6237\u540d\u79f0')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='\u90ae\u7bb1')),
                ('content', models.TextField(verbose_name='\u8bc4\u8bba\u5185\u5bb9')),
                ('replaytime', models.DateTimeField(auto_now_add=True, verbose_name='\u8bc4\u8bba\u65f6\u95f4')),
                ('blog', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='red.Article')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tagname', models.CharField(max_length=30, verbose_name='\u6807\u7b7e\u540d\u79f0')),
                ('tagcount', models.IntegerField(verbose_name='\u6807\u7b7e\u4f5c\u54c1\u6570\u91cf')),
                ('tagcreatedata', models.DateTimeField(auto_now_add=True, verbose_name='\u6807\u7b7e\u521b\u5efa\u65f6\u95f4')),
                ('tagtips', models.IntegerField(verbose_name='\u6807\u7b7e\u8bbf\u95ee\u91cf')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(to='red.Tag'),
        ),
        migrations.AddField(
            model_name='article',
            name='typefor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='red.blogtype'),
        ),
    ]
